name: Image Size Check

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.webp'

jobs:
  check-image-sizes:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install image-size

      - name: Check image sizes
        run: |
          cat << 'EOF' > check-images.js
          const sizeOf = require('image-size');
          const fs = require('fs');
          const path = require('path');

          const MAX_SIZES = {
            '.jpg': 200 * 1024,  // 200KB
            '.jpeg': 200 * 1024, // 200KB
            '.png': 150 * 1024,  // 150KB
            '.gif': 300 * 1024,  // 300KB
            '.webp': 100 * 1024  // 100KB
          };

          // Maximum dimensions
          const MAX_DIMENSIONS = {
            width: 1920,
            height: 1080
          };

          let hasError = false;

          function checkImage(filePath) {
            const stats = fs.statSync(filePath);
            const fileSize = stats.size;
            const ext = path.extname(filePath).toLowerCase();
            const maxSize = MAX_SIZES[ext];

            if (!maxSize) return;

            console.log(`\nChecking: ${filePath}`);

            // Check file size
            if (fileSize > maxSize) {
              console.error(`‚ùå Size Error: File is ${(fileSize/1024).toFixed(2)}KB. Maximum allowed is ${(maxSize/1024).toFixed(2)}KB`);
              hasError = true;
            } else {
              console.log(`‚úÖ Size OK: ${(fileSize/1024).toFixed(2)}KB`);
            }

            // Check dimensions
            const dimensions = sizeOf(filePath);
            console.log(`üìè Dimensions: ${dimensions.width}x${dimensions.height}`);

            if (dimensions.width > MAX_DIMENSIONS.width || dimensions.height > MAX_DIMENSIONS.height) {
              console.error(`‚ùå Dimension Error: Maximum allowed dimensions are ${MAX_DIMENSIONS.width}x${MAX_DIMENSIONS.height}`);
              hasError = true;
            }

            // Suggestions for optimization
            if (ext === '.jpg' || ext === '.jpeg') {
              console.log('üí° Tip: Consider using WebP format for better compression');
            }
            if (fileSize > maxSize) {
              console.log('üí° Tip: Try using tools like squoosh.app or tinypng.com for optimization');
            }
          }

          // Modified file detection for new and modified files
          const { execSync } = require('child_process');
          
          let changedFiles = [];
          try {
            // Get both new and modified files
            const baseCommand = 'git diff --name-only HEAD $(git merge-base HEAD origin/main)';
            const newFilesCommand = 'git ls-files --others --exclude-standard';
            
            const modifiedFiles = execSync(baseCommand, { stdio: ['pipe', 'pipe', 'ignore'] })
              .toString()
              .split('\n');
              
            const newFiles = execSync(newFilesCommand, { stdio: ['pipe', 'pipe', 'ignore'] })
              .toString()
              .split('\n');
              
            changedFiles = [...modifiedFiles, ...newFiles]
              .filter(file => file.match(/\.(jpg|jpeg|png|gif|webp)$/i));
            
            console.log('Modified files:', modifiedFiles);
            console.log('New files:', newFiles);
            console.log('All changed files:', changedFiles);
            
          } catch (error) {
            console.error('Error detecting files:', error);
            console.error(error.message);
            process.exit(1);
          }

          if (changedFiles.length === 0) {
            console.log('No image files were changed in this PR.');
            process.exit(0);
          }

          console.log('üîç Checking image sizes and dimensions...\n');
          changedFiles.forEach(file => {
            if (fs.existsSync(file)) {
              checkImage(file);
            }
          });

          if (hasError) {
            console.error('\n‚ùå Image check failed! Please optimize the flagged images.');
            process.exit(1);
          } else {
            console.log('\n‚úÖ All images passed the size and dimension checks!');
          }
          EOF

          node check-images.js

permissions:
  contents: read
  pull-requests: read 